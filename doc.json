{
  "swagger": "2.0",
  "info": {
    "description": "iReporter is a web app that enables citizens bring any form of corruption to the notice of appropriate authorities and the general public.",
    "version": "1.0.0",
    "title": "iReporter",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "leksyib14@gmail.com"
    },
    "license": {
      "name": "GNU General Public License",
      "url": "https://www.gnu.org/licenses/gpl-3.0.en.html"
    }
  },
  "host": "ireporter-leks.herokuapp.com",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "auth",
      "description": "User authentication",
      "externalDocs": {
        "url": "https://ireporter-leks.herokuapp.com"
      }
    },
    {
      "name": "red-flags",
      "description": "Everything about red-flag records",
      "externalDocs": {
        "url": "https://ireporter-leks.herokuapp.com"
      }
    },
    {
      "name": "interventions",
      "description": "Everything about intervention records",
      "externalDocs": {
        "url": "https://ireporter-leks.herokuapp.com"
      }
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/red-flags": {
      "post": {
        "tags": [
          "red-flags"
        ],
        "summary": "Create a red-flag record",
        "description": "Users can create red-flag records",
        "operationId": "addRedFlagRecord",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "order",
            "description": "The order the user wants to place",
            "required": true,
            "schema": {
              "$ref": "#/definitions/red-flag"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order placed successfully"
          }
        },
        "security": [
          {
            "fast_food_fast_auth": [
              "write:red-flags"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "red-flags"
        ],
        "summary": "Get all red-flags",
        "description": "Return all red-flags from the database",
        "operationId": "getAllred-flags",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Pet object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Order3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully got red-flags"
          },
          "404": {
            "description": "red-flags not found"
          }
        },
        "security": [
          {
            "fast_food_fast_auth": [
              "read:red-flags"
            ]
          }
        ]
      }
    },
    "/red-flags/{orderId}": {
      "get": {
        "tags": [
          "red-flags"
        ],
        "summary": "Find order by ID",
        "description": "Returns a single order",
        "operationId": "getOrderById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of order to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful got order",
            "schema": {
              "$ref": "#/definitions/Order2"
            }
          },
          "404": {
            "description": "Order not found"
          }
        },
        "security": [
          {
            "fast_food_fast_auth": [
              "read:red-flags"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "red-flags"
        ],
        "summary": "Updates the red-flags status",
        "description": "The order status can either be Canceled or Accepted or Rejected",
        "operationId": "updatered-flagstatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of order that needs to be updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Updated status of the order",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Order updated successfully",
            "schema": {
              "$ref": "#/definitions/Order2"
            }
          },
          "404": {
            "description": "Order not found"
          }
        },
        "security": [
          {
            "fast_food_fast_auth": [
              "read:red-flags"
            ]
          }
        ]
      }
    },
    "/api/v1/users/{userId}/red-flags": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Find order by ID",
        "description": "Returns a single order",
        "operationId": "getUserHistory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of of the user who's order history is to be returned",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful got order",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "404": {
            "description": "Order not found"
          }
        },
        "security": [
          {
            "fast_food_fast_auth": [
              "read:red-flags"
            ]
          }
        ]
      }
    },
    "/auth/signup": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Enables a user to signup",
        "description": "Registers a new user",
        "operationId": "signup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Create user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account created successfully",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Enables a user to login",
        "description": "Authenticate a user",
        "operationId": "login",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User sign in details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "You have been logged in successfully!"
          },
          "401": {
            "description": "Could not login. The email and password do not match",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/interventions": {
      "post": {
        "tags": [
          "interventions"
        ],
        "summary": "Add a meal to the interventions",
        "description": "",
        "operationId": "postinterventions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "new meal",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Meal"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Meal added successfully",
            "schema": {
              "$ref": "#/definitions/Meal2"
            }
          },
          "404": {
            "description": "Sorry! Meal not found"
          }
        },
        "security": [
          {
            "fast_food_fast_auth": [
              "write:interventions"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "interventions"
        ],
        "summary": "Get all meals",
        "description": "",
        "operationId": "getinterventions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "interventions gotten successfuly",
            "schema": {
              "$ref": "#/definitions/Meal3"
            }
          },
          "404": {
            "description": "Could not get interventions"
          }
        }
      }
    },
    "/interventions/{mealId}": {
      "get": {
        "tags": [
          "interventions"
        ],
        "summary": "Find meal by ID",
        "description": "Returns a single meal",
        "operationId": "getMealById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "mealId",
            "in": "path",
            "description": "ID of meal to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful got meal",
            "schema": {
              "$ref": "#/definitions/Meal2"
            }
          },
          "404": {
            "description": "Meal not found"
          }
        },
        "security": [
          {
            "fast_food_fast_auth": [
              "read:interventions"
            ]
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "fast_food_fast_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://ireporter-leks.herokuapp.com/api/v1/auth/login",
      "flow": "implicit",
      "scopes": {
        "write:red-flags": "place red-flags",
        "read:red-flags": "get red-flags",
        "write:interventions": "add a meal",
        "read:interventions": "get interventions"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "red-flag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "createdBy": {
          "type": "integer",
          "format": "int64"
        },
        "createdOn": {
          "type": "integer",
          "format": "int64"
        },
        "location": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "images": {
          "type": "array"
        },
        "videos": {
          "type": "array"
        },
        "status": {
          "type": "string",
          "description": "record status",
          "enum": [
            "Draft",
            "Rejected",
            "Under investigation",
            "Resolved"
          ]
        }
      },
      "xml": {
        "name": "red-flag"
      }
    },
    "Order2": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        },
        "recipientId": {
          "type": "integer",
          "format": "int64"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "total_cost": {
          "type": "integer",
          "format": "int32"
        },
        "created_at": {
          "type": "string",
          "format": "string"
        },
        "udated": {
          "type": "string",
          "format": "string"
        },
        "status": {
          "type": "string",
          "description": "Order Status",
          "enum": [
            "Pending",
            "Acceted",
            "Rejected",
            "Canceled"
          ]
        }
      },
      "xml": {
        "name": "Order"
      }
    },
    "Order3": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          },
          "recipientId": {
            "type": "integer",
            "format": "int64"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "total_cost": {
            "type": "integer",
            "format": "int32"
          },
          "created_at": {
            "type": "string",
            "format": "string"
          },
          "udated": {
            "type": "string",
            "format": "string"
          },
          "status": {
            "type": "string",
            "description": "Order Status",
            "enum": [
              "Pending",
              "Acceted",
              "Rejected",
              "Canceled"
            ]
          }
        }
      },
      "xml": {
        "name": "Order"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phonenumber": {
          "type": "integer"
        },
        "registered": {
          "type": "string"
        },
        "isadmin": {
          "type": "boolean"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "User2": {
      "type": "object",
      "properties": {
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "phonenumber": {
          "type": "string"
        },
        "othernames": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "isadmin": {
          "type": "boolean"
        },
        "registered": {
          "type": "string"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "login": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "Meal": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "price": {
          "type": "integer"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Meal2": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "price": {
          "type": "integer"
        },
        "created_at": {
          "type": "string",
          "format": "string"
        },
        "udated_at": {
          "type": "string",
          "format": "string"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Meal3": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "price": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "string"
          },
          "udated_at": {
            "type": "string",
            "format": "string"
          }
        }
      },
      "xml": {
        "name": "User"
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}